## 用set() 重複刪除直到沒有重複的字元
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        length = 0
        long_str = set()
        left = 0

        for right in range(len(s)):
            while (s[right] in long_str):
                long_str.remove(s[left])
                left += 1
            
            long_str.add(s[right])
            length = max(length, right - left + 1)

        return length

'''
## 用dict() key:value(char:index) 紀錄最後一次出現的位置 當重複就移動到重覆位置加1的地方
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        length = 0
        long_str = {}
        left = 0

        for right in range(len(s)):
            if (s[right] in long_str):
                left = max(long_str[s[right]] + 1, left)
            
            long_str[s[right]] = right
            length = max(length, right - left + 1)

        return length
'''
